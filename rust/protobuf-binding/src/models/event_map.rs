// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 25.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `event_map.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:UserEvent)
pub enum UserEvent {
    // @@protoc_insertion_point(enum_value:UserEvent.SignInWithEmailPassword)
    SignInWithEmailPassword = 0,
    // @@protoc_insertion_point(enum_value:UserEvent.SignUp)
    SignUp = 1,
    // @@protoc_insertion_point(enum_value:UserEvent.SignOut)
    SignOut = 2,
    // @@protoc_insertion_point(enum_value:UserEvent.UpdateUserProfile)
    UpdateUserProfile = 3,
    // @@protoc_insertion_point(enum_value:UserEvent.GetUserProfile)
    GetUserProfile = 4,
    // @@protoc_insertion_point(enum_value:UserEvent.InitUser)
    InitUser = 6,
    // @@protoc_insertion_point(enum_value:UserEvent.SetAppearanceSetting)
    SetAppearanceSetting = 7,
    // @@protoc_insertion_point(enum_value:UserEvent.GetAppearanceSetting)
    GetAppearanceSetting = 8,
    // @@protoc_insertion_point(enum_value:UserEvent.GetUserSetting)
    GetUserSetting = 9,
}

impl ::protobuf::Enum for UserEvent {
    const NAME: &'static str = "UserEvent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<UserEvent> {
        match value {
            0 => ::std::option::Option::Some(UserEvent::SignInWithEmailPassword),
            1 => ::std::option::Option::Some(UserEvent::SignUp),
            2 => ::std::option::Option::Some(UserEvent::SignOut),
            3 => ::std::option::Option::Some(UserEvent::UpdateUserProfile),
            4 => ::std::option::Option::Some(UserEvent::GetUserProfile),
            6 => ::std::option::Option::Some(UserEvent::InitUser),
            7 => ::std::option::Option::Some(UserEvent::SetAppearanceSetting),
            8 => ::std::option::Option::Some(UserEvent::GetAppearanceSetting),
            9 => ::std::option::Option::Some(UserEvent::GetUserSetting),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<UserEvent> {
        match str {
            "SignInWithEmailPassword" => ::std::option::Option::Some(UserEvent::SignInWithEmailPassword),
            "SignUp" => ::std::option::Option::Some(UserEvent::SignUp),
            "SignOut" => ::std::option::Option::Some(UserEvent::SignOut),
            "UpdateUserProfile" => ::std::option::Option::Some(UserEvent::UpdateUserProfile),
            "GetUserProfile" => ::std::option::Option::Some(UserEvent::GetUserProfile),
            "InitUser" => ::std::option::Option::Some(UserEvent::InitUser),
            "SetAppearanceSetting" => ::std::option::Option::Some(UserEvent::SetAppearanceSetting),
            "GetAppearanceSetting" => ::std::option::Option::Some(UserEvent::GetAppearanceSetting),
            "GetUserSetting" => ::std::option::Option::Some(UserEvent::GetUserSetting),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [UserEvent] = &[
        UserEvent::SignInWithEmailPassword,
        UserEvent::SignUp,
        UserEvent::SignOut,
        UserEvent::UpdateUserProfile,
        UserEvent::GetUserProfile,
        UserEvent::InitUser,
        UserEvent::SetAppearanceSetting,
        UserEvent::GetAppearanceSetting,
        UserEvent::GetUserSetting,
    ];
}

impl ::protobuf::EnumFull for UserEvent {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("UserEvent").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            UserEvent::SignInWithEmailPassword => 0,
            UserEvent::SignUp => 1,
            UserEvent::SignOut => 2,
            UserEvent::UpdateUserProfile => 3,
            UserEvent::GetUserProfile => 4,
            UserEvent::InitUser => 5,
            UserEvent::SetAppearanceSetting => 6,
            UserEvent::GetAppearanceSetting => 7,
            UserEvent::GetUserSetting => 8,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for UserEvent {
    fn default() -> Self {
        UserEvent::SignInWithEmailPassword
    }
}

impl UserEvent {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<UserEvent>("UserEvent")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fevent_map.proto*\xc2\x01\n\tUserEvent\x12\x1b\n\x17SignInWithEmail\
    Password\x10\0\x12\n\n\x06SignUp\x10\x01\x12\x0b\n\x07SignOut\x10\x02\
    \x12\x15\n\x11UpdateUserProfile\x10\x03\x12\x12\n\x0eGetUserProfile\x10\
    \x04\x12\x0c\n\x08InitUser\x10\x06\x12\x18\n\x14SetAppearanceSetting\x10\
    \x07\x12\x18\n\x14GetAppearanceSetting\x10\x08\x12\x12\n\x0eGetUserSetti\
    ng\x10\tb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(UserEvent::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
