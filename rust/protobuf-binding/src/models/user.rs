// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 25.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `user.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:UserProfilePB)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UserProfilePB {
    // message fields
    // @@protoc_insertion_point(field:UserProfilePB.id)
    pub id: i64,
    // @@protoc_insertion_point(field:UserProfilePB.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:UserProfilePB.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:UserProfilePB.token)
    pub token: ::std::string::String,
    // @@protoc_insertion_point(field:UserProfilePB.icon_url)
    pub icon_url: ::std::string::String,
    // @@protoc_insertion_point(field:UserProfilePB.openai_key)
    pub openai_key: ::std::string::String,
    // @@protoc_insertion_point(field:UserProfilePB.authenticator)
    pub authenticator: ::protobuf::EnumOrUnknown<super::auth::AuthenticatorPB>,
    // @@protoc_insertion_point(field:UserProfilePB.encryption_sign)
    pub encryption_sign: ::std::string::String,
    // @@protoc_insertion_point(field:UserProfilePB.encryption_type)
    pub encryption_type: ::protobuf::EnumOrUnknown<EncryptionTypePB>,
    // @@protoc_insertion_point(field:UserProfilePB.workspace_id)
    pub workspace_id: ::std::string::String,
    // @@protoc_insertion_point(field:UserProfilePB.stability_ai_key)
    pub stability_ai_key: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:UserProfilePB.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UserProfilePB {
    fn default() -> &'a UserProfilePB {
        <UserProfilePB as ::protobuf::Message>::default_instance()
    }
}

impl UserProfilePB {
    pub fn new() -> UserProfilePB {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &UserProfilePB| { &m.id },
            |m: &mut UserProfilePB| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &UserProfilePB| { &m.email },
            |m: &mut UserProfilePB| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &UserProfilePB| { &m.name },
            |m: &mut UserProfilePB| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &UserProfilePB| { &m.token },
            |m: &mut UserProfilePB| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "icon_url",
            |m: &UserProfilePB| { &m.icon_url },
            |m: &mut UserProfilePB| { &mut m.icon_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "openai_key",
            |m: &UserProfilePB| { &m.openai_key },
            |m: &mut UserProfilePB| { &mut m.openai_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "authenticator",
            |m: &UserProfilePB| { &m.authenticator },
            |m: &mut UserProfilePB| { &mut m.authenticator },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encryption_sign",
            |m: &UserProfilePB| { &m.encryption_sign },
            |m: &mut UserProfilePB| { &mut m.encryption_sign },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encryption_type",
            |m: &UserProfilePB| { &m.encryption_type },
            |m: &mut UserProfilePB| { &mut m.encryption_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "workspace_id",
            |m: &UserProfilePB| { &m.workspace_id },
            |m: &mut UserProfilePB| { &mut m.workspace_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stability_ai_key",
            |m: &UserProfilePB| { &m.stability_ai_key },
            |m: &mut UserProfilePB| { &mut m.stability_ai_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserProfilePB>(
            "UserProfilePB",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UserProfilePB {
    const NAME: &'static str = "UserProfilePB";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int64()?;
                },
                18 => {
                    self.email = is.read_string()?;
                },
                26 => {
                    self.name = is.read_string()?;
                },
                34 => {
                    self.token = is.read_string()?;
                },
                42 => {
                    self.icon_url = is.read_string()?;
                },
                50 => {
                    self.openai_key = is.read_string()?;
                },
                56 => {
                    self.authenticator = is.read_enum_or_unknown()?;
                },
                66 => {
                    self.encryption_sign = is.read_string()?;
                },
                72 => {
                    self.encryption_type = is.read_enum_or_unknown()?;
                },
                82 => {
                    self.workspace_id = is.read_string()?;
                },
                90 => {
                    self.stability_ai_key = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.id);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.email);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token);
        }
        if !self.icon_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.icon_url);
        }
        if !self.openai_key.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.openai_key);
        }
        if self.authenticator != ::protobuf::EnumOrUnknown::new(super::auth::AuthenticatorPB::Local) {
            my_size += ::protobuf::rt::int32_size(7, self.authenticator.value());
        }
        if !self.encryption_sign.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.encryption_sign);
        }
        if self.encryption_type != ::protobuf::EnumOrUnknown::new(EncryptionTypePB::NoEncryption) {
            my_size += ::protobuf::rt::int32_size(9, self.encryption_type.value());
        }
        if !self.workspace_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.workspace_id);
        }
        if !self.stability_ai_key.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.stability_ai_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if !self.email.is_empty() {
            os.write_string(2, &self.email)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if !self.token.is_empty() {
            os.write_string(4, &self.token)?;
        }
        if !self.icon_url.is_empty() {
            os.write_string(5, &self.icon_url)?;
        }
        if !self.openai_key.is_empty() {
            os.write_string(6, &self.openai_key)?;
        }
        if self.authenticator != ::protobuf::EnumOrUnknown::new(super::auth::AuthenticatorPB::Local) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.authenticator))?;
        }
        if !self.encryption_sign.is_empty() {
            os.write_string(8, &self.encryption_sign)?;
        }
        if self.encryption_type != ::protobuf::EnumOrUnknown::new(EncryptionTypePB::NoEncryption) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.encryption_type))?;
        }
        if !self.workspace_id.is_empty() {
            os.write_string(10, &self.workspace_id)?;
        }
        if !self.stability_ai_key.is_empty() {
            os.write_string(11, &self.stability_ai_key)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UserProfilePB {
        UserProfilePB::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.email.clear();
        self.name.clear();
        self.token.clear();
        self.icon_url.clear();
        self.openai_key.clear();
        self.authenticator = ::protobuf::EnumOrUnknown::new(super::auth::AuthenticatorPB::Local);
        self.encryption_sign.clear();
        self.encryption_type = ::protobuf::EnumOrUnknown::new(EncryptionTypePB::NoEncryption);
        self.workspace_id.clear();
        self.stability_ai_key.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UserProfilePB {
        static instance: UserProfilePB = UserProfilePB {
            id: 0,
            email: ::std::string::String::new(),
            name: ::std::string::String::new(),
            token: ::std::string::String::new(),
            icon_url: ::std::string::String::new(),
            openai_key: ::std::string::String::new(),
            authenticator: ::protobuf::EnumOrUnknown::from_i32(0),
            encryption_sign: ::std::string::String::new(),
            encryption_type: ::protobuf::EnumOrUnknown::from_i32(0),
            workspace_id: ::std::string::String::new(),
            stability_ai_key: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UserProfilePB {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UserProfilePB").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UserProfilePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserProfilePB {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:EncryptionTypePB)
pub enum EncryptionTypePB {
    // @@protoc_insertion_point(enum_value:EncryptionTypePB.NoEncryption)
    NoEncryption = 0,
    // @@protoc_insertion_point(enum_value:EncryptionTypePB.Symmetric)
    Symmetric = 1,
}

impl ::protobuf::Enum for EncryptionTypePB {
    const NAME: &'static str = "EncryptionTypePB";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EncryptionTypePB> {
        match value {
            0 => ::std::option::Option::Some(EncryptionTypePB::NoEncryption),
            1 => ::std::option::Option::Some(EncryptionTypePB::Symmetric),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<EncryptionTypePB> {
        match str {
            "NoEncryption" => ::std::option::Option::Some(EncryptionTypePB::NoEncryption),
            "Symmetric" => ::std::option::Option::Some(EncryptionTypePB::Symmetric),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [EncryptionTypePB] = &[
        EncryptionTypePB::NoEncryption,
        EncryptionTypePB::Symmetric,
    ];
}

impl ::protobuf::EnumFull for EncryptionTypePB {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("EncryptionTypePB").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for EncryptionTypePB {
    fn default() -> Self {
        EncryptionTypePB::NoEncryption
    }
}

impl EncryptionTypePB {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<EncryptionTypePB>("EncryptionTypePB")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nuser.proto\x1a\nauth.proto\"\x83\x03\n\rUserProfilePB\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\x03R\x02id\x12\x14\n\x05email\x18\x02\x20\x01(\tR\x05\
    email\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\x14\n\x05token\
    \x18\x04\x20\x01(\tR\x05token\x12\x19\n\x08icon_url\x18\x05\x20\x01(\tR\
    \x07iconUrl\x12\x1d\n\nopenai_key\x18\x06\x20\x01(\tR\topenaiKey\x126\n\
    \rauthenticator\x18\x07\x20\x01(\x0e2\x10.AuthenticatorPBR\rauthenticato\
    r\x12'\n\x0fencryption_sign\x18\x08\x20\x01(\tR\x0eencryptionSign\x12:\n\
    \x0fencryption_type\x18\t\x20\x01(\x0e2\x11.EncryptionTypePBR\x0eencrypt\
    ionType\x12!\n\x0cworkspace_id\x18\n\x20\x01(\tR\x0bworkspaceId\x12(\n\
    \x10stability_ai_key\x18\x0b\x20\x01(\tR\x0estabilityAiKey*3\n\x10Encryp\
    tionTypePB\x12\x10\n\x0cNoEncryption\x10\0\x12\r\n\tSymmetric\x10\x01b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::auth::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(UserProfilePB::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(EncryptionTypePB::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
